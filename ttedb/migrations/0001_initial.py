# Generated by Django 5.2.4 on 2025-07-26 13:48

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LearningResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("authors", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("methodological_paper", "Methodological Paper"),
                            ("causal_inference", "Causal Inference"),
                            ("dag", "Directed Acyclic Graphs"),
                            ("qba", "Quantitative Bias Analysis"),
                            ("guidelines", "Guidelines"),
                            ("software", "Software/Tools"),
                            ("tutorial", "Tutorial"),
                            ("book", "Book"),
                            ("course", "Course"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField()),
                ("url", models.URLField(max_length=500)),
                ("doi", models.CharField(blank=True, max_length=100, null=True)),
                ("year", models.IntegerField(blank=True, null=True)),
                ("journal", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="intermediate",
                        max_length=20,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("view_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Learning Resource",
                "verbose_name_plural": "Learning Resources",
                "ordering": ["-is_featured", "-year", "title"],
            },
        ),
        migrations.CreateModel(
            name="DatabaseStatistic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "statistic_type",
                    models.CharField(
                        choices=[
                            ("overview", "Overview Statistics"),
                            ("tte_vs_rct", "TTE vs RCT Statistics"),
                            ("tte_general", "General TTE Statistics"),
                            ("disease_distribution", "Disease Distribution"),
                            ("methodology_trends", "Methodology Trends"),
                            ("transparency_metrics", "Transparency Metrics"),
                        ],
                        max_length=50,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("value", models.JSONField()),
                ("description", models.TextField(blank=True, null=True)),
                ("calculated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Database Statistic",
                "verbose_name_plural": "Database Statistics",
                "ordering": ["statistic_type", "name"],
                "unique_together": {("statistic_type", "name")},
            },
        ),
        migrations.CreateModel(
            name="TTEStudy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("first_author", models.CharField(max_length=255)),
                ("year", models.IntegerField()),
                ("doi", models.URLField(max_length=500, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=255, unique=True)),
                (
                    "preprint",
                    models.CharField(
                        blank=True,
                        help_text="Preprint DOI or 'No preprint'",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        help_text="Protocol registration URL",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "institution_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("academic", "Academic"),
                            ("industry", "Industry"),
                            ("government", "Government"),
                            ("mixed", "Mixed"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("institution_names", models.TextField(blank=True, null=True)),
                (
                    "coi",
                    models.CharField(
                        blank=True,
                        help_text="Conflicts of interest declaration",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("coi_institutions", models.TextField(blank=True, null=True)),
                ("funding", models.CharField(blank=True, max_length=255, null=True)),
                ("funding_institutions", models.TextField(blank=True, null=True)),
                ("data_url", models.URLField(blank=True, max_length=500, null=True)),
                ("code_url", models.URLField(blank=True, max_length=500, null=True)),
                ("disease", models.CharField(max_length=255)),
                ("disease_category", models.CharField(max_length=100)),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("claims", "Claims"),
                            ("ehr", "Electronic Health Records"),
                            ("registry", "Registry"),
                            ("survey", "Survey"),
                            ("rcts", "RCTs"),
                            ("national_database", "National Database"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "data_sources_n",
                    models.IntegerField(
                        blank=True, help_text="Number of data sources", null=True
                    ),
                ),
                ("data_geography", models.CharField(max_length=255)),
                (
                    "missing_method",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "matching_method",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "analysis_method",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("estimand", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "dag",
                    models.BooleanField(
                        default=False, help_text="Directed Acyclic Graph used"
                    ),
                ),
                (
                    "qba",
                    models.BooleanField(
                        default=False, help_text="Quantitative Bias Analysis performed"
                    ),
                ),
                ("n_covariates", models.IntegerField(blank=True, null=True)),
                (
                    "trts_n",
                    models.IntegerField(
                        blank=True, help_text="Number of treatments", null=True
                    ),
                ),
                ("eligible_sample", models.TextField(blank=True, null=True)),
                (
                    "n_trt",
                    models.IntegerField(
                        blank=True, help_text="Number in treatment group", null=True
                    ),
                ),
                (
                    "n_ctrl",
                    models.IntegerField(
                        blank=True, help_text="Number in control group", null=True
                    ),
                ),
                ("n_emulations", models.IntegerField(blank=True, null=True)),
                (
                    "target_trial_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "target_trial_reg_no",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "target_trial_doi",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "TTE Study",
                "verbose_name_plural": "TTE Studies",
                "ordering": ["-year", "first_author"],
                "indexes": [
                    models.Index(fields=["year"], name="ttedb_ttest_year_927339_idx"),
                    models.Index(
                        fields=["disease_category"],
                        name="ttedb_ttest_disease_1bd709_idx",
                    ),
                    models.Index(
                        fields=["data_type"], name="ttedb_ttest_data_ty_841445_idx"
                    ),
                    models.Index(
                        fields=["first_author"], name="ttedb_ttest_first_a_a38eb8_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PICOComparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_trial_name", models.CharField(max_length=255)),
                (
                    "target_trial_reg_no",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "target_trial_doi",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("population", models.TextField()),
                ("intervention", models.TextField()),
                ("comparison", models.TextField()),
                ("outcome", models.TextField()),
                ("intervention_rct", models.TextField(blank=True, null=True)),
                ("comparison_rct", models.TextField(blank=True, null=True)),
                (
                    "outcome_type",
                    models.CharField(
                        choices=[("efficacy", "Efficacy"), ("safety", "Safety")],
                        max_length=20,
                    ),
                ),
                (
                    "effect_measure",
                    models.CharField(
                        choices=[
                            ("HR", "Hazard Ratio"),
                            ("OR", "Odds Ratio"),
                            ("RR", "Risk Ratio"),
                            ("RD", "Risk Difference"),
                            ("MD", "Mean Difference"),
                            ("SMD", "Standardized Mean Difference"),
                        ],
                        max_length=10,
                    ),
                ),
                ("rct_estimate", models.FloatField()),
                ("rct_lb", models.FloatField(help_text="Lower bound of 95% CI")),
                ("rct_ub", models.FloatField(help_text="Upper bound of 95% CI")),
                ("tte_estimate", models.FloatField()),
                ("tte_lb", models.FloatField(help_text="Lower bound of 95% CI")),
                ("tte_ub", models.FloatField(help_text="Upper bound of 95% CI")),
                ("tte_rct_diff_estimate", models.FloatField(blank=True, null=True)),
                ("tte_rct_diff_lb", models.FloatField(blank=True, null=True)),
                ("tte_rct_diff_ub", models.FloatField(blank=True, null=True)),
                ("rct2_estimate", models.FloatField(blank=True, null=True)),
                ("rct2_lb", models.FloatField(blank=True, null=True)),
                ("rct2_ub", models.FloatField(blank=True, null=True)),
                ("rct3_estimate", models.FloatField(blank=True, null=True)),
                ("rct3_lb", models.FloatField(blank=True, null=True)),
                ("rct3_ub", models.FloatField(blank=True, null=True)),
                ("rct4_estimate", models.FloatField(blank=True, null=True)),
                ("rct4_lb", models.FloatField(blank=True, null=True)),
                ("rct4_ub", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tte_study",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pico_comparisons",
                        to="ttedb.ttestudy",
                    ),
                ),
            ],
            options={
                "verbose_name": "PICO Comparison",
                "verbose_name_plural": "PICO Comparisons",
                "ordering": ["tte_study", "outcome"],
                "indexes": [
                    models.Index(
                        fields=["effect_measure"], name="ttedb_picoc_effect__e3faa1_idx"
                    ),
                    models.Index(
                        fields=["outcome_type"], name="ttedb_picoc_outcome_772258_idx"
                    ),
                    models.Index(
                        fields=["target_trial_name"],
                        name="ttedb_picoc_target__b04d1c_idx",
                    ),
                ],
            },
        ),
    ]
